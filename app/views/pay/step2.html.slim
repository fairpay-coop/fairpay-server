
h1.title Payment Test Flow - Step 2

/|transaction id: #{@transaction.id}
/br
/|Payor: #{@transaction.payor.name}
/br
/|Payee: #{@transaction.payee.name}
br
|Amount: #{@transaction.base_amount}
br
br

/- if params[:payment_type] == 'dwolla'
b Dwolla
br
| Transaction Fee: $0.00
br
- unless @transaction.payor.has_dwolla_auth
  = link_to "authorize", "/dwolla/auth?t=#{@transaction.uuid}"
- else
  /= link_to "confirm payment w/ default funding source", "/pay/#{@embed.uuid}/pay_via_dwolla/#{@transaction.uuid}"
  form id="dwolla_form" method="post" action="/pay/#{@embed.uuid}/step2"
    = hidden_field_tag :authenticity_token, form_authenticity_token
    = hidden_field_tag :embed_uuid, @embed.uuid
    = hidden_field_tag :transaction_uuid, @transaction.uuid
    = hidden_field_tag :payment_type, 'dwolla'
    /= hidden_field_tag :merchant_config_id, @embed.merchant_configs.first.id
    = hidden_field_tag :amount, @transaction.base_amount
    =
    |Dwolla Funding Source:
    br
    - for funding_source in @transaction.payor.dwolla_token.funding_sources
      = radio_button_tag :funding_source_id, funding_source[0]
      = " " + funding_source[1]
      br
    input type="submit" value="Pay with Dwolla"

/- if params[:payment_type] == 'authorizenet'
br
br


script src="http://code.jquery.com/jquery-1.11.3.min.js"

b Debit/Credit Card
br
- card_fee_range = @transaction.card_fee_range
| Transaction Fee:
div id="fee_info"
  | $#{card_fee_range[0]} - #{card_fee_range[1]} (depends on card type)

div id="errorMessage"

form id="card_form"
  /method="post" action="/pay/#{@embed.uuid}/step2"
  = hidden_field_tag :authenticity_token, form_authenticity_token
  = hidden_field_tag :embed_uuid, @embed.uuid
  = hidden_field_tag :transaction_uuid, @transaction.uuid
  = hidden_field_tag :payment_type, 'card'
  = hidden_field_tag :merchant_config_id, @embed.merchant_configs.first.id
  /= hidden_field_tag :amount, @transaction.amount
  input type="hidden" id="amount" name="amount" value="#{@transaction.base_amount}"
  /todo: better way to pass server rendered values into js logic?
  input type="hidden" id="default_fee_info" value="$#{card_fee_range[0]} - #{card_fee_range[1]} (depends on card type)"

  |Card Number:
  input type="text" id="card_number" name="card_number" value=""
  br
  |Card Exp (mmyy):
  input type="text" name="card_mmyy" value=""
  br
  |Card CVV:
  input type="text" name="card_cvv" value=""
  br
  |Billing Zip:
  input type="text" name="billing_zip" value=""
  br
  /|Charge Description:
  /input type="text" name="description" value="test"
  /br

  input id="step2_submit" type="submit" value="Pay with Card"


br
br
|Status:
div id="paymentStatus"
br

br
b PayPal
br
= link_to "Pay via PayPal", "/paypal/checkout/#{@transaction.base_amount}"

//javascript:
//  document.addEventListener( "DOMContentLoaded", function(e) {
//    //require('public/js/card').registerHooks()
//    Card.registerHooks()
//  }, false);

javascript:

  var lastBin = '';

  function cardNumberKeypressed(event) {
    //alert('cardNumberKeypressed: ' + event);
    var card_number = $('#card_number').val();
    var amount = $('#amount').val();
    //alert('card number: ' + card_number);
    if (card_number.length >= 6) {
      var newBin = card_number.slice(0, 6);
      if (lastBin != newBin) {
        //alert('new bin: ' + newBin + ', last bin: ' + lastBin + ', amount: ' + amount);
        lastBin = newBin;
        data = {bin: newBin, amount: amount};
        FairPayApi.estimateFee(data, handleEstimateFeeResponse);
      }
    } else {
      if (lastBin != '') {
        var default_fee_info = $('#default_fee_info').val();
        $("#fee_info").html(default_fee_info);
        lastBin = ''
      }
    }
  }

  function handleEstimateFeeResponse(data) {
    //alert('estimate fee response: ' + JSON.stringify(data));
    if (data.result) {
      info = data.result;
      //var bindata = "<b>Information about your card</b>: <br>&nbsp; &nbsp;" + info.card_brand + ", " + info.card_type + ", " + info.card_category +
      //        ", " + info.issuing_org + ", " + (info.is_regulated ? "regulated bank" : "unregulated bank") + "";
      //bindata += "<br>Transaction fee for this card: <b>$" + info.estimated_fee + "</b>";
      //bindata += "<br>&nbsp; &nbsp;" + info.fee_tip;

      var bindata = "<b>$" + info.estimated_fee + "</b>";
      if (info.fee_tip) {
        bindata += "&nbsp; (" + info.fee_tip + ")";
      }

      $("#fee_info").html(bindata);

    } else {
      console.log("info not found for bin: " + lastBin);
      $("#fee_info").html("<br><br>");
    }
  }
  document.addEventListener("DOMContentLoaded", function (e) {
    $("#card_number").bind("keyup", cardNumberKeypressed);
  }, false);


  $("#card_form").submit(handleCard);

  function handleCard() {
    //alert('handleCard');
    var form = document.getElementById("card_form");
    var data = {};
    FairPayApi.copyFormValues(data, form, ['embed_uuid', 'transaction_uuid', 'payment_type', 'amount', 'card_number', 'card_mmyy', 'card_cvv', 'billing_zip']);
    FairPayApi.submitCard(data, handleCardResponse);
    return false;
  }

  function handleCardResponse(data) {
    //alert('step2 response: ' + JSON.stringify(data));
    if (data.result) {
      var status = data.result.status;
      $('#paymentStatus').html(status);
      $('#errorMessage').html('');      //var linkUrl = data.result.statusLink;
      //var linkHtml = '<a href="' + linkUrl + '">' + linkUrl + '</a>';
      //$('#statusLink').html(linkHtml);
      if (data.result.redirect_url) {
        window.location = data.result.redirect_url;
      }
    } else if (data.error) {
      //alert('error resp: ' + JSON.stringify(data.error));
      $('#paymentStatus').html('error');
      $('#errorMessage').html(data.error.message);
      //$('#errorStack').html('<pre>' + data.error.stack + '</pre>');
    }
  }